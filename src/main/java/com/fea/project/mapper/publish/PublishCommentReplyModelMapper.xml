<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fea.project.dao.publish.PublishCommentReplyModelMapper">
  <resultMap id="BaseResultMap" type="com.fea.project.model.publish.PublishCommentReplyModel">
    <id column="publish_comment_reply_id" jdbcType="BIGINT" property="publishCommentReplyId" />
    <result column="publish_comment_id" jdbcType="BIGINT" property="publishCommentId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="reply_user_id" jdbcType="BIGINT" property="replyUserId" />
    <result column="reply_user_name" jdbcType="VARCHAR" property="replyUserName" />
    <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    publish_comment_reply_id, publish_comment_id, user_id, user_name, reply_user_id, 
    reply_user_name, reply_time, reply_content
  </sql>
  <select id="selectByExample" parameterType="com.fea.project.model.publish.PublishCommentReplyModelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_project_publish_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_project_publish_comment_reply
    where publish_comment_reply_id = #{publishCommentReplyId,jdbcType=BIGINT}
  </select>
  
  <resultMap id="rm" type="com.fea.project.model.publish.vo.PublishCommentReplyViewVo">
    <id column="publish_comment_reply_id" jdbcType="BIGINT" property="publishCommentReplyId" />
    <result column="publish_comment_id" jdbcType="BIGINT" property="publishCommentId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="reply_user_id" jdbcType="BIGINT" property="replyUserId" />
    <result column="reply_user_name" jdbcType="VARCHAR" property="replyUserName" />
    <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="userImagePath" jdbcType="VARCHAR" property="userImagePath" />
  </resultMap>
  <select id="selectAllByPublishCommentReplyId" parameterType="java.lang.Long" resultMap="rm">
	    select 
		tppcr.* ,
		tsu.image_path userImagePath
		from 
		t_project_publish_comment_reply tppcr
		LEFT JOIN
		l2cplat_ceshi.t_sys_user tsu
		on tppcr.reply_user_id = tsu.USER_ID
		where publish_comment_id = #{publishCommentId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_project_publish_comment_reply
    where publish_comment_reply_id = #{publishCommentReplyId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.fea.project.model.publish.PublishCommentReplyModelExample">
    delete from t_project_publish_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="publishCommentReplyId" parameterType="com.fea.project.model.publish.PublishCommentReplyModel">
    insert into t_project_publish_comment_reply (publish_comment_reply_id, publish_comment_id, 
      user_id, user_name, reply_user_id, 
      reply_user_name, reply_time, reply_content
      )
    values (#{publishCommentReplyId,jdbcType=BIGINT}, #{publishCommentId,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{replyUserId,jdbcType=BIGINT}, 
      #{replyUserName,jdbcType=VARCHAR}, #{replyTime,jdbcType=TIMESTAMP}, #{replyContent,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="publishCommentReplyId" parameterType="com.fea.project.model.publish.PublishCommentReplyModel">
    insert into t_project_publish_comment_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="publishCommentReplyId != null">
        publish_comment_reply_id,
      </if>
      <if test="publishCommentId != null">
        publish_comment_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="replyUserId != null">
        reply_user_id,
      </if>
      <if test="replyUserName != null">
        reply_user_name,
      </if>
      <if test="replyTime != null">
        reply_time,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="publishCommentReplyId != null">
        #{publishCommentReplyId,jdbcType=BIGINT},
      </if>
      <if test="publishCommentId != null">
        #{publishCommentId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="replyUserId != null">
        #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="replyUserName != null">
        #{replyUserName,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fea.project.model.publish.PublishCommentReplyModelExample" resultType="java.lang.Long">
    select count(*) from t_project_publish_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_project_publish_comment_reply
    <set>
      <if test="record.publishCommentReplyId != null">
        publish_comment_reply_id = #{record.publishCommentReplyId,jdbcType=BIGINT},
      </if>
      <if test="record.publishCommentId != null">
        publish_comment_id = #{record.publishCommentId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.replyUserId != null">
        reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      </if>
      <if test="record.replyUserName != null">
        reply_user_name = #{record.replyUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.replyTime != null">
        reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.replyContent != null">
        reply_content = #{record.replyContent,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_project_publish_comment_reply
    set publish_comment_reply_id = #{record.publishCommentReplyId,jdbcType=BIGINT},
      publish_comment_id = #{record.publishCommentId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      user_name = #{record.userName,jdbcType=VARCHAR},
      reply_user_id = #{record.replyUserId,jdbcType=BIGINT},
      reply_user_name = #{record.replyUserName,jdbcType=VARCHAR},
      reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
      reply_content = #{record.replyContent,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fea.project.model.publish.PublishCommentReplyModel">
    update t_project_publish_comment_reply
    <set>
      <if test="publishCommentId != null">
        publish_comment_id = #{publishCommentId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="replyUserId != null">
        reply_user_id = #{replyUserId,jdbcType=BIGINT},
      </if>
      <if test="replyUserName != null">
        reply_user_name = #{replyUserName,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
    </set>
    where publish_comment_reply_id = #{publishCommentReplyId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fea.project.model.publish.PublishCommentReplyModel">
    update t_project_publish_comment_reply
    set publish_comment_id = #{publishCommentId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      user_name = #{userName,jdbcType=VARCHAR},
      reply_user_id = #{replyUserId,jdbcType=BIGINT},
      reply_user_name = #{replyUserName,jdbcType=VARCHAR},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      reply_content = #{replyContent,jdbcType=VARCHAR}
    where publish_comment_reply_id = #{publishCommentReplyId,jdbcType=BIGINT}
  </update>
</mapper>